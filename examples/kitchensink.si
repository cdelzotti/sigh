// This file showcases every single syntactic feature in the language.

class myClass {
    var a : Int = 0

    fun myClass(initialVal : Int) {
        a = initialVal
    }

    struct ClassStruct {
        var a: Int
        var b: Int
    }

    fun classFunct() : Int {
        return 2
    }
}

var myVar : myClass = myClass(4)

class myOtherClass sonOf myClass {

    fun myOtherClass() {
    }
}

class yetAnotherClass sonOf aClassThatDoesNotExist {
    var c : Int = 4
}

class yetAnotherClass2 sonOf array_add {
    var c : Int = 4

    fun yetAnotherClass2() {
        c = 0
    }
}

class cycleClass1 sonOf cycleClass2 {
    var d : Int = 5

    fun cycleClass1() : Int {
        d = 0
    }
}

class cycleClass2 sonOf cycleClass1 {
    var e : Int = 6

    fun cycleClass2() {
        e = 0
    }
}

fun array_add (a: Int[]): Int
{
    fun add (a: Int, b: Int): Int {
        return add2(a, b) // works!

        fun add2 (a: Int, b: Int): Int {
            return a + b
        }
    }

    if (a.length == 0)
        return 0

    var i: Int = 1
    var result: Int = a[0]

    while i < a.length {
        result = add(result, a[i])
        i = i + 1
    }

    return result
}

var total: Int = array_add([1, 2, 3])
var float_total: Float = total + 0.0

var math: Int = 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

fun validate5 (value: Int)
{
    if (value!= 5)
        print("We wanted 5 but got: " + value)

    if (value > 5)
        print("It was too big.")
    else if (value < 5)
        print("It was too small.")
    else
        print("It's just right.")
}

struct Pair {
    var a: Int
    var b: Int
}

var type: Type = Pair
print("" + type)

fun sum_pair (pair: Pair): Int {
    return pair.a + pair.b
}

validate5(sum_pair($Pair(2, 3)))

fun use_array (array: Int[]) {}

var intArray: Int[] = []
var stringArray: String[] = []
use_array([])

fun myFunc() : Unborn<Int> {
	var myVar : Int = 0
	// ...
	// Some time-taking treatment
	// ...
	return myVar
} 
var aNiceVar : Unborn<Int> = myFunc()
// ...
// Some treatment that doesn't require the variable aNiceVar
// ...

Born(aNiceVar, { // Awaits for aNiceVar's result
    aNiceVar = 0 // You can do something if the other thread crashes
})
aNiceVar = aNiceVar + 1 // From now on, aNiceVar can be used as a simple int
